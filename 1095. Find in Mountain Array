class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int left = 0;
        int right = mountainArr.length() - 1;

        // Find peak index
        while(left < right){
            int mid = left + (right - left)/2;
            if(mountainArr.get(mid) > mountainArr.get(mid + 1)){
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        int maxidx = left;

        // Search in ascending part
        int result = check(mountainArr, target, 0, maxidx, true);
        if(result != -1){
            return result;
        } else {
            // Search in descending part
            return check(mountainArr, target, maxidx + 1, mountainArr.length() - 1, false);
        }
    }

    public static int check(MountainArray mountainArr, int target, int left, int right, boolean ascending){
        while(left <= right){
            int mid = left + (right - left) / 2;
            int midVal = mountainArr.get(mid);

            if(midVal == target){
                return mid;
            }

            if(ascending){
                if(midVal > target){
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else {
                if(midVal < target){
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
        }
        return -1;
    }
}
