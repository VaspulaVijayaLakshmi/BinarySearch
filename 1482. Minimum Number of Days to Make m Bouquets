class Solution {
public:

    bool canMake(vector<int>& bloomDay, int m, int k, int day) {
    int bouquets = 0, flowers = 0;
    
    for (int bloom : bloomDay) {
        if (bloom <= day) {
            flowers++;
            if (flowers == k) {
                bouquets++;
                flowers = 0;
            }
        } else {
            flowers = 0; // reset if not bloomed
        }
    }

    return bouquets >= m;
}

int minDays(vector<int>& bloomDay, int m, int k) {
    long long totalFlowers = (long long)m * k;
    if (bloomDay.size() < totalFlowers) return -1;

    int left = 1, right = *max_element(bloomDay.begin(), bloomDay.end());
    int answer = -1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (canMake(bloomDay, m, k, mid)) {
            answer = mid;
            right = mid - 1; // try smaller days
        } else {
            left = mid + 1;
        }
    }

    return answer;
}
};


// the max days all flowers take - max of bloom days

// so min day is , all flowers bllom on same day


// low=1 max=max(bloomDay)
