class Solution {
public:

    int ableToEat(vector<int>& piles, int h,int K){
       int hours=0;

       for(int i=0;i<piles.size();i++){
             if(piles[i]%K==0) 
                 hours += piles[i]/K;

             else  
              hours += piles[i]/K +1 ;    

            if(hours>h) return false;   
        }
        
        return true;

    }


    int minEatingSpeed(vector<int>& piles, int h) {

        int low=1, high = *max_element(piles.begin(), piles.end());

        //find if at each point can check if u will be able to finish
        // bananas with eatig K at a time.
        int k=0;
        while(low<=high){

            int mid = low+(high-low)/2;

            if(ableToEat(piles,h,mid)){
                k=mid;
                high=mid-1; 
            }

            else{
                low=mid+1;
            }    
        }

        return k;
        
    }
};

// Input: piles = [3,6,7,11], 
// h = 8


// the min we can do is 1 banana per hr 
// 1 banana to highest banana in the pile.


// piles = [30,11,23,4,20], h = 5

// [1,30]

// do BS


