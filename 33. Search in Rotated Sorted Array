There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) 
such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). 

For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4


Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1




Example 3:

Input: nums = [1], target = 0
Output: -1






class Solution{

public int search(int[] nums, int target) {
        int strt=0,end=nums.length-1;
        
        while(strt<=end){
        
            int mid=strt+(end-strt)/2; 
            
            
            if(nums[mid]==target) return mid; // return if we get the target value.
            
            
            //check which part of the array we are!!!
            //are we in 1st part or 2nd part
            
            if(nums[strt]<=nums[mid]){ 
               
              if(target>=nums[i] && target<=nums[mid])
                  j=mid-1;        //target is here, so we will look in this part
               
                else 
                i=mid+1;          //target is not here so we go to another part
            }
            
            
            
            else{ 
            
            // if 2nd part is sorted
            
                if(target>=nums[mid] && target<=nums[j]) 
                i=mid+1;//target is here, so we will look in this part
                
                
                else 
                j=mid-1;//target is not here so we go to another part
            }
        }
        return -1;
    }
}
