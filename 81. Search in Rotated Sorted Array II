81. Search in Rotated Sorted Array II

class Solution {
public:
    bool search(vector<int>& nums, int target) {

          int strt=0,end=nums.size()-1;
        while(strt<=end){
            
            int mid=strt+(end-strt)/2;
    
            if(nums[mid]==target)
                return true;

// Hnalde duplicates
// Eg : nums = [2, 2, 2, 3, 2, 2, 2]

// nums[left] == nums[mid] == nums[right] == 2


// Why AND (&&) and not OR (||)?
// Because you only want to shrink the window in the worst-case, where you can't get any information about which side is sorted.

// “Only shrink if all three are equal — because in this case, we are truly stuck.”
            
            if(nums[mid]==nums[strt] && nums[mid]==nums[end]){
                strt++;
                end--;
            }         
                    
            //check which part we are in ,then check which side we need to move
            
            //we are in first part we are in
            else if(nums[mid]>=nums[strt]){
               
                if(target>=nums[strt] && target<=nums[mid])
                     end=mid-1;
                
                else
                    strt=mid+1;
                    
            }    
            else{
              
                if(target>=nums[mid] && target<=nums[end])
                    strt=mid+1;
                
                else
                    end=mid-1;
            }    
        }
        
        
        return false;
    }

    };
// this has duplicates



// nums = [2,5,6,0,0,1,2], target = 1

// mid = 3
// 0 , we are in increasing size of decreasing side
// compare 0 with -> 2>0<2 - we are in decreasing side.

// target - so we need to go right


// 5 - 2<5>2


