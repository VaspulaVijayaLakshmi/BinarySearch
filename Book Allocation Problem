Youâ€™re given:

An array pages[] where each element represents the number of pages in a book.
m students.

You need to allocate consecutive books to each student (no splitting a book).

Each student must get at least one book.

Objective: Minimize the maximum number of pages assigned to a student.



class Solution {
  public:
  
  
  
  //we try to find a minPages, i.e, each student should get
  //atleast minPages.
   bool canAllocate(vector<int> &arr, int k, int maxPages){
       
       int students = 1;  // first student
       int currentSum = 0;

    for (int pages : arr) {
        
        //if the curr pages allocated  exceeds the max
        //i can allocate, then assign to next students
        if (currentSum + pages > maxPages) {
            students++;
            currentSum = pages;
            
            if (students > k) return false;
        } 
        
        
        else {
            currentSum += pages;
        }
        
        
    }
    return true;
           
   }
    
  
    int findPages(vector<int> &arr, int k) {
        
        int n = arr.size();
        if (k > n) return -1;
        
        //minimize the maximum
        
        //Divide choclates was maximize the minimum
        
  
        int l = *max_element(arr.begin(),arr.end()) ;
        int h = accumulate(arr.begin(),arr.end(),0);
        int pages=-1;
        
        while(l<=h){
            
            int mid = l+(h-l)/2;
            
            if(canAllocate(arr,k,mid)){
                pages = mid;
                h=mid-1;
            }
            
            else l=mid+1;
            
            
        }
        
        return pages;
        
        
    }
};





// minimize the maximum number of pages
// student should get the max pages, but we need to minimize 
// the diff.


